Based on the document, help me migrate all of my config to new ConfigMMEngine.py file. Also help me rewrite all of my source code to adapt to it. The stype/type of the config file should follow like in the document.

Example: 

```
# Save the following codes in example_config.py
# Almost copied from the above example, with some commas removed
model = dict(type='MyAwesomeModel',
    layers=2,
    activation='relu')
work_dir = 'exp/my_awesome_model'

train_dataloader = dict(
    dataset=dict(type='MyDataset',
        is_train=True,
        size=10000),
    sampler=dict(
        type='DefaultSampler',
        shuffle=True),
    collate_fn=dict(type='default_collate'),
    batch_size=64,
    pin_memory=True,
    num_workers=2)
train_cfg = dict(
    by_epoch=True,
    max_epochs=10,
    val_begin=2,
    val_interval=1)
optim_wrapper = dict(
    optimizer=dict(
        type='Adam',
        lr=0.001))
param_scheduler = dict(
    type='MultiStepLR',
    by_epoch=True,
    milestones=[4, 8],
    gamma=0.1)

val_dataloader = dict(
    dataset=dict(type='MyDataset',
        is_train=False,
        size=1000),
    sampler=dict(
        type='DefaultSampler',
        shuffle=False),
    collate_fn=dict(type='default_collate'),
    batch_size=1000,
    pin_memory=True,
    num_workers=2)
val_cfg = dict()
val_evaluator = dict(type='Accuracy')

default_hooks = dict(
    checkpoint=dict(type='CheckpointHook', interval=1))
launcher = 'none'
env_cfg = dict(
    cudnn_benchmark=False,
    backend='nccl',
    mp_cfg=dict(mp_start_method='fork'))
log_level = 'INFO'
load_from = None
resume = False
```

The spirit of my original code: The code needs to be general-purpose, flexible, and domain-agnostic, as I intend to use it for various different use cases. 

---


(OpenMMLab) Based on the provided documents, help me create an abstract RegistryManager (or another class name you think is appropriate) that can be utilized for a variety of use cases. The class should be designed to be general-purpose, flexible, and domain-agnostic, allowing it to be used across different applications. To demonstrate its functionality, you should provide an example of a method within the class. Remember to use type hinting when you are coding.


Use default registry from from mmengine.registry import build_runner_from_cfg, build_model_from_cfg, build_scheduler_from_cfg, MODELS, RUNNERS, RUNNER_CONSTRUCTORS, LOOPS, HOOKS, STRATEGIES, DATASETS, DATA_SAMPLERS, TRANSFORMS, MODEL_WRAPPERS, WEIGHT_INITIALIZERS, OPTIMIZERS, OPTIM_WRAPPERS, OPTIM_WRAPPER_CONSTRUCTORS, PARAM_SCHEDULERS, METRICS, EVALUATOR, TASK_UTILS, VISUALIZERS, VISBACKENDS, LOG_PROCESSORS, INFERENCERS, FUNCTIONS







